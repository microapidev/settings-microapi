swagger: "2.0"
info:
  title: Settings Microservice
  description: Settings Microservice aids managing configurations
  version: 1.0.0

basePath: /v1/
consumes:
  - application/json
produces:
  - application/json


paths:
  /config/new:
    post:
      tags: ["Configuration"]
      summary: "Add a new config entry"
      description: ""
      operationId: settings.resources.add_config.post
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "data"
          description: "Configuration details"
          required: true
          schema:
            $ref: "#/definitions/Config"
      responses:
        "201":
          description: "Configuration created"
          schema:
            $ref: "#/definitions/Config"
        "400":
          description: "Invalid input"
        "403":
          description: "Configuration already exist"
  /config/update:
    patch:
      tags: ["Configuration"]
      summary: "Update Configuration"
      description: "Update Configuration for a specific api"
      operationId: settings.resources.update_config.post
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "data"
          description: "Configuration update data"
          required: true
          schema:
            $ref: "#/definitions/Config"
      responses:
        "201":
          description: "Configuration updated"
          schema:
            $ref: "#/definitions/Config"
        "400":
          description: "Invalid input"
        "403":
          description: "Bad Request"
  /config/{user_id}/all:
      get:
        tags: ["Configuration"]
        summary: "Get all config entry"
        description: ""
        operationId: settings.resources.all_config.get
        produces:
          - "application/json"
        parameters:
          - name: "user_id"
            in: "path"
            description: "Get all user configuration details"
            required: true
            type: "integer"
        responses:
          "200":
            description: "All configuration"
          "404":
            description: "Invalid Id"
  /config/rollback/{user_id}/{api_name}:
    get:
      tags: ["Configuration"]
      summary: "Rollback Configuration"
      description: "Rollback to the previous configuration"
      operationId: settings.resources.rollback_config.rollback
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "user_id"
          description: "unique user identifier"
          type: "integer"
          required: true
        - in: "path"
          name: "api_name"
          description: "name of api service"
          type: "string"
          required: true
      responses:
        "201":
          description: "Configuration Rollback Success"
          schema:
            $ref: "#/definitions/Config_sm"
        "400":
          description: "Invalid input"
        "403":
          description: "Forbidden"
  /config/delete/{user_id}/{api_name}:
    delete:
      tags: ["Configuration"]
      summary: "Delete Configuration"
      description: "Delete Configuration that match configTag"
      operationId: settings.resources.delete_config.delete
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "user_id"
          in: "path"
          description: "User id to delete"
          required: true
          type: "string"
        - name: "api_name"
          in: "path"
          description: "api_name to delete"
          required: true
          type: "string"
      responses:
        "201":
          description: "Configuration Deleted"
          schema:
            $ref: "#/definitions/Config_sm"
        "400":
          description: "Invalid input"
        "404":
          description: "Configuration does not exist"
  /config/single/{user_id}/{api_name}:
    get:
      tags: ["Configuration"]
      summary: "Get single Configuration"
      description: "Get Configuration that match configTag"
      operationId: settings.resources.get_single_config.get
      produces:
        - "application/json"
      parameters:
        - name: "user_id"
          in: "path"
          description: "User id"
          required: true
          type: "string"
        - name: "api_name"
          in: "path"
          description: "api_name"
          required: true
          type: "string"
      responses:
        "201":
          description: "Success"
          schema:
            $ref: "#/definitions/Config_sm"
        "400":
          description: "Invalid input"
        "404":
          description: "Configuration does not exist"


definitions:
  Config:
    type: "object"
    required:
      - "user_id"
      - "api_name"
      - "current_config"
    properties:
      id:
        type: "number"
      user_id:
        type: "number"
      api_name:
        type: "string"
      config_tag:
        type: "string"
      current_config:
        type: "object"
        items: {}
      previous_config:
        type: "object"
        items: {}
      default_config:
        type: "object"
        items: {}
      created_at:
        type: "string"
      updated_at:
        type: "string"
    example:
      user_id: 1
      api_name: 'email-microapi'
      current_config: {"some_json_or_ini": "data"}
      default_config: {"some_json_or_ini": "data"}

  Config_sm:
      type: "object"
      required:
        - "user_id"
        - "api_name"
      properties:
        user_id:
          type: "number"
        api_name:
          type: "string"
      example:
        user_id: 1
        api_name: 'email-microapi'

